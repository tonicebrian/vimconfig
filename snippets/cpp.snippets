
# std::cout
snippet cout
	std::cout << ${1:message} << std::endl;

# Print elements in a range
snippet prange
	std::copy(${1:container}.begin(), $1.end(),
				          std::ostream_iterator<${2:type}>(std::cout," "));
	
# Test main
snippet testmain
	#include <cppunit/extensions/TestFactoryRegistry.h>
	#include <cppunit/ui/text/TestRunner.h>
	#include <cppunit/TestResult.h>
	#include <cppunit/TestResultCollector.h>
	#include <cppunit/XmlOutputter.h>
	#include <cppunit/TextOutputter.h>
	#include <fstream>
	
	#include <cstdlib>
	
	int main(int argc, char* argv[]) {
		// Define test variables
		using namespace CppUnit;
		using namespace std;
	
		TestResult controller;
		TestResultCollector result;
		controller.addListener(&result);
	
		TextUi::TestRunner runner;
		TestFactoryRegistry& registry = TestFactoryRegistry::getRegistry();
		Test* testToRun = registry.makeTest(); 
	
		runner.addTest(testToRun);
		runner.run(controller);
		
		// Write results into XML
		ofstream xmlFileOut("cpptestresults.xml");
		XmlOutputter xmlOut(&result, xmlFileOut);
		xmlOut.write();
		xmlFileOut.close();
	
		// And to the console
		TextOutputter textOutput(&result, std::cout);
		textOutput.write();
		
		return 0;
	}

# Skeleton for a CppUnit Test
snippet cpptest
	#include <cppunit/extensions/HelperMacros.h>
	#include "${1:classUnderTest}.hpp"

	class $1Test : public CppUnit::TestFixture {
		CPPUNIT_TEST_SUITE($1Test);
		CPPUNIT_TEST(test${2:FunctionOrMethod});
		CPPUNIT_TEST_SUITE_END();

		public:

		void setUp(){
		}

		void tearDown(){
		}

		void test$2(){
			CPPUNIT_ASSERT_EQUAL(1,0);
		}
	};

	CPPUNIT_TEST_SUITE_REGISTRATION($1Test);




