* Introduction

This is an attempt for having a manageable vimrc file by maintaining this
literate programming file
* Vimrc
                                 
First let's make our vimrc truly multiplatform

#+BEGIN_SRC sh :tangle ~/.config/nvim/init.vim
" WARNING. FILE AUTOMATICALLY GENERATED BY FILE vim.org. DO NOT EDIT.
" TO REGENERATE. Do `emacs ~/.vim/vim.org` and `C-c C-v t` to tangle vimrc

if has('win32') || has ('win64')
    let $VIMBUNDLE = $HOME."/vimfiles/bundle"    " Use the system's clipboard as the default register
    set clipboard=unnamed
    set guifont=Consolas
else
    let $VIMBUNDLE = $HOME."/.vim/bundle"
    set clipboard=unnamedplus
endif

filetype plugin off

if has('vim_starting')
    set nocompatible               " Be iMproved
    let $NEOBUNDLEHOME = $VIMBUNDLE."/neobundle.vim"
    set runtimepath+=$NEOBUNDLEHOME
endif
#+END_SRC

Load all required plugins using NeoBundle. Try to document each plugin and usage
below

#+BEGIN_SRC sh :tangle ~/.config/nvim/init.vim
" Required:
call neobundle#begin(expand('~/.vim/bundle/'))

" Let NeoBundle manage NeoBundle
" Required:
NeoBundleFetch 'Shougo/neobundle.vim'

" My Bundles here:
" Refer to |:NeoBundle-examples|.
" Note: You don't set neobundle setting in .gvimrc!

" Snippets
NeoBundle 'SirVer/ultisnips'
NeoBundle 'honza/vim-snippets' " This are the actual snippets
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsListSnippets="<c-tab>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"

" Replacecment for Grep
NeoBundle 'numkil/ag.nvim'

" NERDTree
NeoBundle 'scrooloose/nerdtree'

" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"

" ReST documentation plugin
NeoBundle 'Rykka/riv.vim'

" Git plugins
NeoBundle 'tpope/vim-fugitive.git'
NeoBundle 'int3/vim-extradite' " Extend fugitive capabilities

" Bars, panels and files
NeoBundle 'Shougo/unite.vim'

" Javascript
NeoBundle 'maksimr/vim-jsbeautify'

" Text manipulation
NeoBundle 'vim-scripts/Align'
NeoBundle 'vim-scripts/Gundo'
NeoBundle 'tpope/vim-commentary'
NeoBundle 'godlygeek/tabular'

NeoBundle 'tpope/vim-surround.git'
NeoBundle 'altercation/vim-colors-solarized.git'
NeoBundle 'scrooloose/syntastic.git'
NeoBundle 'techlivezheng/vim-plugin-minibufexpl'
NeoBundle 'Shougo/vimproc',{
      \ 'build' : {
      \     'windows' : 'make -f make_mingw32.mak',
      \     'cygwin' : 'make -f make_cygwin.mak',
      \     'mac' : 'make -f make_mac.mak',
      \     'unix' : 'make -f make_unix.mak',
      \    },
      \ }
NeoBundle 'jgdavey/tslime.vim' "Send snippets to tmux
NeoBundleLazy 'derekwyatt/vim-scala'

" Haskell
NeoBundleLazy 'raichoo/haskell-vim'
NeoBundleLazy 'begriffs/vim-haskellConceal'
NeoBundleLazy 'eagletmt/ghcmod-vim'
NeoBundleLazy 'eagletmt/neco-ghc'
NeoBundleLazy 'Twinside/vim-hoogle'

NeoBundleLazy 'chrisbra/NrrwRgn'

" Python development
NeoBundle 'klen/python-mode'
NeoBundle 'davidhalter/jedi-vim'

call neobundle#end()

NeoBundleCheck
#+END_SRC
* Key bindings

| Functionality | Action                                   | Keymap         |
|---------------+------------------------------------------+----------------|
| Leader        | Compose commands                         | ,              |
| LocalLeader   | Compose commands                         | _              |
|---------------+------------------------------------------+----------------|
| Ag            | Search word under cursor                 | K              |
|---------------+------------------------------------------+----------------|
| NERDTree      | Open window                              | <F9>           |
|               | Open window and open folders recursively | <F9>PO         |
|               | Close NERDTree window                    | <F10>          |
|---------------+------------------------------------------+----------------|
| Motion        | Move to left window                      | <c-h>          |
|               | Move to right window                     | <c-l>          |
|               | Move to window below                     | <c-k>          |
|               | Move to window above                     | <c-j>          |
|---------------+------------------------------------------+----------------|
| Unite         | Open Menu                                | <LocalLeader>u |
|               | Grep                                     | <LocalLeader>a |
|---------------+------------------------------------------+----------------|
| JsBeautify    | Beautifies JSON, JS, HTML or CSS         | <c-f>          |
#+BEGIN_SRC sh :tangle ~/.config/nvim/init.vim
let mapleader = ","
let maplocalleader = "_"
#+END_SRC
* Motion
Remap moving between windows for fewer keystrokes
#+BEGIN_SRC sh ~/.config/nvim/init.vim
 Window movement
map <c-j> <c-w>j
map <c-k> <c-w>k
map <c-l> <c-w>l
map <c-h> <c-w>h
#+END_SRC

* Faster grepping using Silver Searcher
For grepping commands we are going to use =ag= as it claims to be faster than
=ack= (check https://robots.thoughtbot.com/faster-grepping-in-vim). 
** Config 

#+BEGIN_SRC sh :tangle ~/.config/nvim/init.vim

" Start searching in the root project
let g:ag_working_path_mode="ra"

" bind K to grep word under cursor
nnoremap K :Ag <C-R><C-W><CR>:cw<CR>

#+END_SRC
* NERDTree

It is convenient to have file navigation inside vim. Also open files recursively
with F9 starting in current folder. If you don't want this just type :NERDTree
#+BEGIN_SRC sh :tangle ~/.config/nvim/init.vim
:nnoremap <F9> :NERDTree<cr>
:nnoremap <F10> :NERDTreeClose<cr>
#+END_SRC
* Javascript, Html y JsBeautify
La utilidad JsBeautify permite indentar y presentar de forma visualmente
atrativa los formatos Json, Javascript, HTML y CSS. Para ello crear el mismo
mapping <c-f> que funcionará al entrar en los distintos tipos de fichero.

#+BEGIN_SRC sh :tangle ~/.config/nvim/init.vim
".vimrc
map <c-f> :call JsBeautify()<cr>
" or
autocmd FileType javascript noremap <buffer>  <c-f> :call JsBeautify()<cr>
" for json
autocmd FileType json noremap <buffer> <c-f> :call JsonBeautify()<cr>
" for jsx
autocmd FileType jsx noremap <buffer> <c-f> :call JsxBeautify()<cr>
" for html
autocmd FileType html noremap <buffer> <c-f> :call HtmlBeautify()<cr>
" for css or scss
autocmd FileType css noremap <buffer> <c-f> :call CSSBeautify()<cr>
#+END_SRC
* Unite
#+BEGIN_SRC sh :tangle ~/.config/nvim/init.vim
" Unite menus
let g:unite_source_menu_menus = {}

" menu prefix key (for all Unite menus) {{{
nmap <LocalLeader> [menu]
" }}}

" menus menu
nnoremap <silent>[menu]u :Unite -silent -winheight=20 menu<CR>

" file searching menu {{{
let g:unite_source_menu_menus.grep = {
    \ 'description' : ' search files
        \ ⌘ [space]a',
    \}
let g:unite_source_menu_menus.grep.command_candidates = [
    \['▷ grep (ag → ack → grep) ⌘ ,a',
        \'Unite -no-quit grep'],
    \['▷ find',
        \'Unite find'],
    \['▷ locate',
        \'Unite -start-insert locate'],
    \['▷ vimgrep (very slow)',
        \'Unite vimgrep'],
    \]
nnoremap <silent>[menu]a :Unite -silent menu:grep<CR>

" Haskell menu {{{
let g:unite_source_menu_menus.haskell = {
    \ 'description' : ' haskell commands
        \ ⌘ [space]h',
    \}
let g:unite_source_menu_menus.haskell.command_candidates = [
    \['▷ create tags ⌘ ,_ct',
        \'[menu]ct'],
    \]
" }}}
nnoremap <silent>[menu]h :Unite -silent menu:haskell<CR>

" |_ct|                 create |tags| file 
" |_si|                 show info for id under cursor
" |_t|                  show type for id under cursor
" |_T|                  insert type declaration for id under cursor
#+END_SRC

* TODO. Process the rest of the configuration file

Instead of converting =vimrc= completely to Literate programming go bit by bit.
Here is the current status.

#+BEGIN_SRC sh :tangle ~/.config/nvim/init.vim
filetype plugin indent on     " Required!


vmap <C-c><C-c> <Plug>SendSelectionToTmux
nmap <C-c><C-c> <Plug>NormalModeSendToTmux
nmap <C-c>r <Plug>SetTmuxVars

" Python development
" Python-mode
" Activate rope
" Keys:
" K             Show python docs
" <Ctrl-Space>  Rope autocomplete
" <Ctrl-c>g     Rope goto definition
" <Ctrl-c>d     Rope show documentation
" <Ctrl-c>f     Rope find occurrences
" <Leader>b     Set, unset breakpoint (g:pymode_breakpoint enabled)
" [[            Jump on previous class or function (normal, visual, operator modes)
" ]]            Jump on next class or function (normal, visual, operator modes)
" [M            Jump on previous class or method (normal, visual, operator modes)
" ]M            Jump on next class or method (normal, visual, operator modes)
let g:pymode_rope = 0

" Documentation
let g:pymode_doc = 1
let g:pymode_doc_key = 'K'

"Linting
let g:pymode_lint = 1
let g:pymode_lint_checker = "pyflakes,pep8"
" Auto check on save
let g:pymode_lint_write = 1

" Support virtualenv
let g:pymode_virtualenv = 1

" Enable breakpoints plugin
let g:pymode_breakpoint = 1
let g:pymode_breakpoint_bind = '<leader>b'

" syntax highlighting
let g:pymode_syntax = 1
let g:pymode_syntax_all = 1
let g:pymode_syntax_indent_errors = g:pymode_syntax_all
let g:pymode_syntax_space_errors = g:pymode_syntax_all

" Don't autofold code
let g:pymode_folding = 0


" Shortcuts
nmap <F8> :TagbarToggle<CR>

set textwidth=80

set guioptions-=T  "remove toolbar
set guioptions-=r  "remove right-hand scroll bar

" Automatically change to current directory
set autochdir

set encoding=utf-8
set scrolloff=3
set autoindent
set showmode
set showcmd
set ttyfast
set ruler
set autoindent

" Numbering
if v:version > 702
    set relativenumber
endif
set number

set pastetoggle=<F2>


" Syntastic configuraiton
let g:syntastic_always_populate_loc_list=1
let g:syntastic_cpp_compiler = 'g++'
let g:syntastic_cpp_compiler_options = ' -std=c++11'

" I want searching to follow regex rules
nnoremap / /\v
vnoremap / /\v
set incsearch
set showmatch
set hlsearch

" Colors
set t_Co=16 " Necesary for terminator
set background=dark
colorscheme solarized

" Folding
set foldmethod=indent
set foldlevel=99

" Don't use arrows
noremap <Up> <Nop>
noremap <Down> <Nop>
noremap <Left> <Nop>
noremap <Right> <Nop>

" Turn on the WiLd menu
set wildmenu
" Tab-complete files up to longest unambiguous prefix
set wildmode=list:longest,full

" Height of the command bar
set cmdheight=1

" Task lists
map <leader>td <Plug>TaskList

" Gundo
map <leader>g :GundoToggle<CR>

" Syntaxing
syntax on                           " syntax highlighing

" Deal with tabs
set expandtab
set list
set listchars=tab:→\ 
set tabstop=4
set softtabstop=4
set shiftwidth=4

" Different filesyntax
au BufNewFile,BufRead *.pig set filetype=pig syntax=pig
au BufRead,BufNewFile *.nw  set filetype=noweb
au BufRead,BufNewFile *.nw  set cindent
au BufRead,BufNewFile *.asciidoc set spell tw=80
au! BufRead,BufWrite,BufWritePost,BufNewFile *.org 
au BufEnter *.org            call org#SetOrgFileType()

" " Alignment {{{

" Stop Align plugin from forcing its mappings on us
let g:loaded_AlignMapsPlugin=1
" Align on equal signs
map <Leader>a= :Align =<CR>
" Align on commas
map <Leader>a, :Align ,<CR>
" Align on pipes
map <Leader>a<bar> :Align <bar><CR>
" Prompt for align character
map <leader>ap :Align

" Enable some tabular presets for Haskell
let g:haskell_tabular = 1

" }}}

" Slime {{{

vmap <silent> <Leader>rs <Plug>SendSelectionToTmux
nmap <silent> <Leader>rs <Plug>NormalModeSendToTmux
nmap <silent> <Leader>rv <Plug>SetTmuxVars

" }}}

" Haskell {{{ 
let g:haddock_browser="/usr/bin/firefox"
set iskeyword=a-z,A-Z,_,.,39 " Configuration for hoshasktags

set tags=tags;/,codex.tags;/

let g:tagbar_type_haskell = {
    \ 'ctagsbin'  : 'hasktags',
    \ 'ctagsargs' : '-x -c -o-',
    \ 'kinds'     : [
        \  'm:modules:0:1',
        \  'd:data: 0:1',
        \  'd_gadt: data gadt:0:1',
        \  't:type names:0:1',
        \  'nt:new types:0:1',
        \  'c:classes:0:1',
        \  'cons:constructors:1:1',
        \  'c_gadt:constructor gadt:1:1',
        \  'c_a:constructor accessors:1:1',
        \  'ft:function types:1:1',
        \  'fi:function implementations:0:1',
        \  'o:others:0:1'
    \ ],
    \ 'sro'        : '.',
    \ 'kind2scope' : {
        \ 'm' : 'module',
        \ 'c' : 'class',
        \ 'd' : 'data',
        \ 't' : 'type'
    \ },
    \ 'scope2kind' : {
        \ 'module' : 'm',
        \ 'class'  : 'c',
        \ 'data'   : 'd',
        \ 'type'   : 't'
    \ }
\ }

" Generate haskell tags with codex and hscope
map <leader>tg :!codex update<CR>:call system("git hscope")<CR><CR>:call LoadHscope()<CR>

map <leader>tt :TagbarToggle<CR>

set csprg=hscope
set csto=1 " search codex tags first
set cst
set csverb
nnoremap <silent> <C-\> :cs find c <C-R>=expand("<cword>")<CR><CR>
" Automatically make cscope connections
function! LoadHscope()
  let db = findfile("hscope.out", ".;")
  if (!empty(db))
    let path = strpart(db, 0, match(db, "/hscope.out$"))
    set nocscopeverbose " suppress 'duplicate connection' error
    exe "cs add " . db . " " . path
    set cscopeverbose
  endif
endfunction
au BufEnter /*.hs call LoadHscope()

" }}}

" Haskell Interrogation {{{

set completeopt+=longest

" Use buffer words as default tab completion
let g:SuperTabDefaultCompletionType = '<c-x><c-p>'

" But provide (neco-ghc) omnicompletion
if has("gui_running")
  imap <c-space> <c-r>=SuperTabAlternateCompletion("\<lt>c-x>\<lt>c-o>")<cr>
else " no gui
  if has("unix")
    inoremap <Nul> <c-r>=SuperTabAlternateCompletion("\<lt>c-x>\<lt>c-o>")<cr>
  endif
endif

" Show types in completion suggestions
let g:necoghc_enable_detailed_browse = 1

" Type of expression under cursor
nmap <silent> <leader>ht :GhcModType<CR>
" Insert type of expression under cursor
nmap <silent> <leader>hT :GhcModTypeInsert<CR>
" GHC errors and warnings
nmap <silent> <leader>hc :SyntasticCheck ghc_mod<CR>
" Haskell Lint
let g:syntastic_mode_map = { 'mode': 'active', 'passive_filetypes': ['haskell'] }
nmap <silent> <leader>hl :SyntasticCheck hlint<CR>

" Hoogle the word under the cursor
nnoremap <silent> <leader>hh :Hoogle<CR>

" Hoogle and prompt for input
nnoremap <leader>hH :Hoogle 

" Hoogle for detailed documentation (e.g. "Functor")
nnoremap <silent> <leader>hi :HoogleInfo<CR>

" Hoogle for detailed documentation and prompt for input
nnoremap <leader>hI :HoogleInfo 

" Hoogle, close the Hoogle window
nnoremap <silent> <leader>hz :HoogleClose<CR>

" }}}

" Conversion {{{

function! Pointfree()
  call setline('.', split(system('pointfree '.shellescape(join(getline(a:firstline, a:lastline), "\n"))), "\n"))
endfunction
vnoremap <silent> <leader>h. :call Pointfree()<CR>

function! Pointful()
  call setline('.', split(system('pointful '.shellescape(join(getline(a:firstline, a:lastline), "\n"))), "\n"))
endfunction
vnoremap <silent> <leader>h> :call Pointful()<CR>

" }}}


" Latex
" OPTIONAL: Starting with Vim 7, the filetype of empty .tex files defaults to
" 'plaintex' instead of 'tex', which results in vim-latex not being loaded.
" The following changes the default filetype back to 'tex':
let g:tex_flavor='latex'

" Pep 8
let g:pep8_map='<leader>8'

" Git
set statusline=%{fugitive#statusline()}

" Tab completion
au FileType python set omnifunc=pythoncomplete#Complete
let g:SuperTabDefaultCompletionType = "context"
set completeopt=menuone,longest,preview

" Refactoring
map <leader>j :RopeGotoDefinition<CR>
map <leader>r :RopeRename<CR>


" Include local configuration
if filereadable(expand("~/.vim.local"))
	so ~/.vim.local
endif

#+END_SRC

